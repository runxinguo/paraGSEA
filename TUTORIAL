Tutorial Process

----------------------------------------------------
1.Get the software repository from github and install the software
you must install the GitHub Command Line Tools first.
then enter the local path you want to store it and clone it.

command line example:
#cd /usr/local
#git clone https://github.com/ysycloud/paraGSEA.git

Then,you can install the software easilly.

command line example:
#cd paraGSEA
#make all
#make install

If you want to clean the Intermediate files When you finished the work above,
you can use this command:
#make clean

Make sure you have installed the common tools we listed below.
1. Matlab R2009a and above
2. MPI
3. gcc compiler supports OpenMP

At this time, you have finished all works before you can use the software.

----------------------------------------------------
2.Pretreatment
The original input data come from LINCS, which is evolved from the Connectivity Map project. 
The data is stored in the HDF5 file format with a gctx suffix. In order to use and analysis 
the data, we must use 1ktools, which is an OpenSource project published in github, to parse 
it and extract the information we care about.

Setting the MATLAB path:
Enter the "pathtool" command, click "Add with Subfolders...", and select the directory ParaGSEA/matlab_for_parse.

using by command line:
You can easilly use the script `example/runPreGSEAbyMatlab.sh` to parse the original data. Or you 
can easilly use the script `example/runparaPreGSEAbyMatlab.sh` to parse the original data in a more 
efficent way but you must make sure that you have a multicores environment first. 

The input and output file path you must set in both two script, and an extra core number is also supposed to be
setted in the second script. However, you must notice that the number of cores must be smaller than the actual 
core number in your system.

-----------------------------------------------------
3.GSEA by C Tools
There are several C Tools are implemented in our work. 
At the same time, we provided good interfaces to call these tools.

(1)Quick Search

--->Function:
	Implemented original GSEA Approach with GeneSet and Profiles

--->Input:
	1목a parsed profiles's file from pretreatment stage.
	2목GeneSet No. from 1 to  profile number corresponding to the first input밃
		Manual input any times until enter "exit" .

--->Output:
	TopN GSEA indexs including ES목NES and P values

--->Interfaces:
	1목quick_search_serial밐
		role: complete GSEA and show the topN results in a serial way.
		cmd example:  ./bin/quick_search_serial "data/data_for_test.txt" 10
		param list :
				input: a parsed profiles's file from pretreatment stage.
				topn: The first and last N GSEA records ordered by ES.
				
	2목quick_search_omp밐
		role: complete parallel GSEA by OpenMP and show the topN results.
		cmd example:  ./bin/quick_search_omp "data/data_for_test.txt" 4 10 1
		param list :
				input: a parsed profiles's file from pretreatment stage.
				thread_num: the number of threads 
				topn: The first and last N GSEA records ordered by ES.

	3목quick_search_mpi밐 
		role: complete parallel GSEA by MPI and show the topN results.
		cmd example:  mpirun -n 2 -ppn 2 -hostfile hostfile ./bin/quick_search_mpi "data/data_for_test.txt" 15
		param list :
				-n process_num : Total number of processes.
				-ppn pernum: the number of processes in each node
				-hostfile hostfile:  list the IP or Hostname of nodes
				input: a parsed profiles's file from pretreatment stage.
				topn: The first and last N GSEA records ordered by ES.
		note:  you'd better keep the formula correct : process_num = pernum * number of IP(Hostname) list in hostfile

		
(2)Compare Profiles

--->Function:
	Compare two gene profile sets to get an Enrichment Score matrix of every gene profile pairs

--->Input:
	two parsed profiles's file from pretreatment stage.

--->Output:
	ES Matrix splited to several parts in every nodes 

--->Interfaces:		
	1목ES_Matrix_ompi_nocom밐 
		role: complete parallel computing ES_Matrix and write out the result by MPI/OpenMP with no communication when distribute the input file.
		cmd example:  mpirun -n 2 -ppn 2 -hostfile hostfile ./bin/ES_Matrix_ompi_nocom 4 50 "data/data_for_test.txt" "data/data_for_test.txt" "data/ES_Matrix_test"
		param list :
				-n process_num : Total number of processes.
				-ppn pernum: the number of processes in each node
				-hostfile hostfile:  list the IP or Hostname of nodes
				thread_num: the number of threads in per process_num
				siglen: the length of Gene Expression Signature
				input1: a parsed profiles's file from pretreatment stage.
				input2: another parsed profiles's file from pretreatment stage.
				output: output file ,distributed in every nodes ,with ES Matrix
		note:  you'd better keep the formula correct : process_num = pernum * number of IP(Hostname) list in hostfile

	2목ES_Matrix_ompi_p2p밐 
		role: complete parallel computing ES_Matrix and write out the result by MPI/OpenMP with p2p communication when distribute the input file.
		cmd example:  mpirun -n 2 -ppn 2 -hostfile hostfile ./bin/ES_Matrix_ompi_p2p 4 50 "data/data_for_test.txt" "data/data_for_test.txt" "data/ES_Matrix_test"
		param list :
				-n process_num : Total number of processes.
				-ppn pernum: the number of processes in each node
				-hostfile hostfile:  list the IP or Hostname of nodes
				thread_num: the number of threads in per process_num
				siglen: the length of Gene Expression Signature
				input1: a parsed profiles's file from pretreatment stage.
				input2: another parsed profiles's file from pretreatment stage.
				output: output file ,distributed in every nodes ,with ES Matrix
		note:  you'd better keep the formula correct : process_num = pernum * number of IP(Hostname) list in hostfile
		
	3목ES_Matrix_ompi_cocom밐 
		role: complete parallel computing ES_Matrix and write out the result by MPI/OpenMP with collective communication when distribute the input file.
		cmd example:  mpirun -n 2 -ppn 2 -hostfile hostfile ./bin/ES_Matrix_ompi_cocom 4 50 "data/data_for_test.txt" "data/data_for_test.txt" "data/ES_Matrix_test"
		param list :
				-n process_num : Total number of processes.
				-ppn pernum: the number of processes in each node
				-hostfile hostfile:  list the IP or Hostname of nodes
				thread_num: the number of threads in per process_num
				siglen: the length of Gene Expression Signature
				input1: a parsed profiles's file from pretreatment stage.
				input2: another parsed profiles's file from pretreatment stage.
				output: output file ,distributed in every nodes ,with ES Matrix
		note:  you'd better keep the formula correct : process_num = pernum * number of IP(Hostname) list in hostfile

		
(3)Clustering Profiles

--->Function:
	cluster the gene profiles based on the Enrichment Score matrix which can be seemed as the similarity Matrix of gene profiles

--->Input:
	distributed ES_Matrix file we get from stage 2(Compare Profiles)

--->Output:
	class flags file of every profiles 

--->Interfaces:	
	1목Cluster_KMediods_ompi밐 
		role: read the ES_Matrix file 목complete a general clustering algorithm like K-Mediods by MPI/OpenMP.
		cmd example:  mpirun -n 2 -ppn 2 -hostfile hostfile ./bin/Cluster_KMediods_ompi 4 10 "data/ES_Matrix_test" "data/Cluster_result_test.txt"
		param list :
				-n process_num : Total number of processes.
				-ppn pernum: the number of processes in each node
				-hostfile hostfile:  list the IP or Hostname of nodes
				thread_num: the number of threads in per process_num
				cluster_num: the number of clusters we want to get 
				input: distributed ES_Matrix file we get from stage 2(Compare Profiles)
				output: output class flags file of every profiles in root node
		note:  
				1)you'd better keep the formula correct : process_num = pernum * number of IP(Hostname) list in hostfile
				2)input matrix should include the same identity of rows and columns, which means stage 2 is supposed to use same two file as its input
				3)the first three parameters(process_num,pernum,hostfile) should not be changed compare with stage 2, so that the program can find all the distributed ES_Matrix file in all nodes
	
	2목Cluster_KMediods++_ompi밐 
		role: read the ES_Matrix file 목complete a general clustering algorithm like K-Mediods by MPI/OpenMP.
				but let the distance between initial cluster centers far as possible.
		cmd example:  mpirun -n 2 -ppn 2 -hostfile hostfile ./bin/Cluster_KMediods++_ompi 4 10 "data/ES_Matrix_test" "data/Cluster_result_test.txt"
		param list :
				-n process_num : Total number of processes.
				-ppn pernum: the number of processes in each node
				-hostfile hostfile:  list the IP or Hostname of nodes
				thread_num: the number of threads in per process_num
				cluster_num: the number of clusters we want to get 
				input: distributed ES_Matrix file we get from stage 2(Compare Profiles)
				output: output class flags file of every profiles in root node
		note:  
				1)you'd better keep the formula correct : process_num = pernum * number of IP(Hostname) list in hostfile
				2)input matrix should include the same identity of rows and columns, which means stage 2 is supposed to use same two file as its input
				3)the first three parameters(process_num,pernum,hostfile) should not be changed compare with stage 2, so that the program can find all the distributed ES_Matrix file in all nodes
				4)this version may get better results, but in determining the initial clustering center needs more overhead.
